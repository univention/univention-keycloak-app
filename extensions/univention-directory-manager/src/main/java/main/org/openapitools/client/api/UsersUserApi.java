/*
 * Univention Directory Manager REST interface
 * Schema definition for the objects in the Univention Directory Manager REST interface
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.UsersUser;
import org.openapitools.client.model.UsersUserList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersUserApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersUserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersUserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for udmUsersUserObject
     * @param dn The objects DN (urlencoded) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * E-Tag -  <br>  * Expires -  <br>  * Last-Modified -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call udmUsersUserObjectCall(String dn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/user/{dn}"
            .replace("{" + "dn" + "}", localVarApiClient.escapeString(dn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/hal+json",
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call udmUsersUserObjectValidateBeforeCall(String dn, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dn' is set
        if (dn == null) {
            throw new ApiException("Missing the required parameter 'dn' when calling udmUsersUserObject(Async)");
        }

        return udmUsersUserObjectCall(dn, _callback);

    }

    /**
     * Get a representation of the User object
     *
     * @param dn The objects DN (urlencoded) (required)
     * @return UsersUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * E-Tag -  <br>  * Expires -  <br>  * Last-Modified -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
     </table>
     */
    public UsersUser udmUsersUserObject(String dn) throws ApiException {
        ApiResponse<UsersUser> localVarResp = udmUsersUserObjectWithHttpInfo(dn);
        return localVarResp.getData();
    }

    /**
     * Get a representation of the User object
     *
     * @param dn The objects DN (urlencoded) (required)
     * @return ApiResponse&lt;UsersUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * E-Tag -  <br>  * Expires -  <br>  * Last-Modified -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsersUser> udmUsersUserObjectWithHttpInfo(String dn) throws ApiException {
        okhttp3.Call localVarCall = udmUsersUserObjectValidateBeforeCall(dn, null);
        Type localVarReturnType = new TypeToken<UsersUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a representation of the User object (asynchronously)
     *
     * @param dn The objects DN (urlencoded) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * E-Tag -  <br>  * Expires -  <br>  * Last-Modified -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call udmUsersUserObjectAsync(String dn, final ApiCallback<UsersUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = udmUsersUserObjectValidateBeforeCall(dn, _callback);
        Type localVarReturnType = new TypeToken<UsersUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for udmUsersUserObjectCreate
     * @param usersUser  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call udmUsersUserObjectCreateCall(UsersUser usersUser, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersUser;

        // create path and map variables
        String localVarPath = "/users/user/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        // Manually changed
        final String[] localVarAccepts = {
            "application/json",
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        // Manually changed
        final String[] localVarContentTypes = {
            "application/json",
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call udmUsersUserObjectCreateValidateBeforeCall(UsersUser usersUser, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'usersUser' is set
        if (usersUser == null) {
            throw new ApiException("Missing the required parameter 'usersUser' when calling udmUsersUserObjectCreate(Async)");
        }

        return udmUsersUserObjectCreateCall(usersUser, _callback);

    }

    /**
     * Create a new User object
     *
     * @param usersUser  (required)
     * @return UsersUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
     </table>
     */
    public UsersUser udmUsersUserObjectCreate(UsersUser usersUser) throws ApiException {
        ApiResponse<UsersUser> localVarResp = udmUsersUserObjectCreateWithHttpInfo(usersUser);
        return localVarResp.getData();
    }

    /**
     * Create a new User object
     *
     * @param usersUser  (required)
     * @return ApiResponse&lt;UsersUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<UsersUser> udmUsersUserObjectCreateWithHttpInfo(UsersUser usersUser) throws ApiException {
        okhttp3.Call localVarCall = udmUsersUserObjectCreateValidateBeforeCall(usersUser, null);
        Type localVarReturnType = new TypeToken<UsersUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new User object (asynchronously)
     *
     * @param usersUser  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call udmUsersUserObjectCreateAsync(UsersUser usersUser, final ApiCallback<UsersUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = udmUsersUserObjectCreateValidateBeforeCall(usersUser, _callback);
        Type localVarReturnType = new TypeToken<UsersUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for udmUsersUserObjectModify
     * @param dn The objects DN (urlencoded) (required)
     * @param usersUser  (required)
     * @param ifMatch provide entity tag to make a condition request to not overwrite any values in a race condition (optional)
     * @param ifUnmodifiedSince provide last modified time to make a condition request to not overwrite any values in a race condition (optional)
     * @param userAgent The user agent (optional)
     * @param acceptLanguage The accepted response languages (optional)
     * @param ifNoneMatch  (optional)
     * @param ifModifiedSince  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
        <tr><td> 201 </td><td> Success (on move and rename) </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call udmUsersUserObjectModifyCall(String dn, UsersUser usersUser, String ifMatch, String ifUnmodifiedSince, String userAgent, String acceptLanguage, String ifNoneMatch, String ifModifiedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersUser;

        // create path and map variables
        String localVarPath = "/users/user/{dn}"
            .replace("{" + "dn" + "}", localVarApiClient.escapeString(dn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }

        if (userAgent != null) {
            localVarHeaderParams.put("User-Agent", localVarApiClient.parameterToString(userAgent));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/hal+json",
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/hal+json",
            "application/json",
            "text/html"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call udmUsersUserObjectModifyValidateBeforeCall(String dn, UsersUser usersUser, String ifMatch, String ifUnmodifiedSince, String userAgent, String acceptLanguage, String ifNoneMatch, String ifModifiedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dn' is set
        if (dn == null) {
            throw new ApiException("Missing the required parameter 'dn' when calling udmUsersUserObjectModify(Async)");
        }

        // verify the required parameter 'usersUser' is set
        if (usersUser == null) {
            throw new ApiException("Missing the required parameter 'usersUser' when calling udmUsersUserObjectModify(Async)");
        }

        return udmUsersUserObjectModifyCall(dn, usersUser, ifMatch, ifUnmodifiedSince, userAgent, acceptLanguage, ifNoneMatch, ifModifiedSince, _callback);

    }

    /**
     * Modify or move an User object
     *
     * @param dn The objects DN (urlencoded) (required)
     * @param usersUser  (required)
     * @param ifMatch provide entity tag to make a condition request to not overwrite any values in a race condition (optional)
     * @param ifUnmodifiedSince provide last modified time to make a condition request to not overwrite any values in a race condition (optional)
     * @param userAgent The user agent (optional)
     * @param acceptLanguage The accepted response languages (optional)
     * @param ifNoneMatch  (optional)
     * @param ifModifiedSince  (optional)
     * @return UsersUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
        <tr><td> 201 </td><td> Success (on move and rename) </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
     </table>
     */
    public UsersUser udmUsersUserObjectModify(String dn, UsersUser usersUser, String ifMatch, String ifUnmodifiedSince, String userAgent, String acceptLanguage, String ifNoneMatch, String ifModifiedSince) throws ApiException {
        ApiResponse<UsersUser> localVarResp = udmUsersUserObjectModifyWithHttpInfo(dn, usersUser, ifMatch, ifUnmodifiedSince, userAgent, acceptLanguage, ifNoneMatch, ifModifiedSince);
        return localVarResp.getData();
    }

    /**
     * Modify or move an User object
     *
     * @param dn The objects DN (urlencoded) (required)
     * @param usersUser  (required)
     * @param ifMatch provide entity tag to make a condition request to not overwrite any values in a race condition (optional)
     * @param ifUnmodifiedSince provide last modified time to make a condition request to not overwrite any values in a race condition (optional)
     * @param userAgent The user agent (optional)
     * @param acceptLanguage The accepted response languages (optional)
     * @param ifNoneMatch  (optional)
     * @param ifModifiedSince  (optional)
     * @return ApiResponse&lt;UsersUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
        <tr><td> 201 </td><td> Success (on move and rename) </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<UsersUser> udmUsersUserObjectModifyWithHttpInfo(String dn, UsersUser usersUser, String ifMatch, String ifUnmodifiedSince, String userAgent, String acceptLanguage, String ifNoneMatch, String ifModifiedSince) throws ApiException {
        okhttp3.Call localVarCall = udmUsersUserObjectModifyValidateBeforeCall(dn, usersUser, ifMatch, ifUnmodifiedSince, userAgent, acceptLanguage, ifNoneMatch, ifModifiedSince, null);
        Type localVarReturnType = new TypeToken<UsersUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify or move an User object (asynchronously)
     *
     * @param dn The objects DN (urlencoded) (required)
     * @param usersUser  (required)
     * @param ifMatch provide entity tag to make a condition request to not overwrite any values in a race condition (optional)
     * @param ifUnmodifiedSince provide last modified time to make a condition request to not overwrite any values in a race condition (optional)
     * @param userAgent The user agent (optional)
     * @param acceptLanguage The accepted response languages (optional)
     * @param ifNoneMatch  (optional)
     * @param ifModifiedSince  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
        <tr><td> 201 </td><td> Success (on move and rename) </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call udmUsersUserObjectModifyAsync(String dn, UsersUser usersUser, String ifMatch, String ifUnmodifiedSince, String userAgent, String acceptLanguage, String ifNoneMatch, String ifModifiedSince, final ApiCallback<UsersUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = udmUsersUserObjectModifyValidateBeforeCall(dn, usersUser, ifMatch, ifUnmodifiedSince, userAgent, acceptLanguage, ifNoneMatch, ifModifiedSince, _callback);
        Type localVarReturnType = new TypeToken<UsersUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for udmUsersUserObjectRemove
     * @param dn The objects DN (urlencoded) (required)
     * @param cleanup Whether to perform a cleanup (e.g. of temporary objects, locks, etc). (optional, default to true)
     * @param recursive Whether to remove referring objects (e.g. DNS or DHCP references). (optional, default to true)
     * @param userAgent The user agent (optional)
     * @param acceptLanguage The accepted response languages (optional)
     * @param ifNoneMatch  (optional)
     * @param ifModifiedSince  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Object deleted </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call udmUsersUserObjectRemoveCall(String dn, Boolean cleanup, Boolean recursive, String userAgent, String acceptLanguage, String ifNoneMatch, String ifModifiedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/user/{dn}"
            .replace("{" + "dn" + "}", localVarApiClient.escapeString(dn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cleanup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cleanup", cleanup));
        }

        if (recursive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursive", recursive));
        }

        if (userAgent != null) {
            localVarHeaderParams.put("User-Agent", localVarApiClient.parameterToString(userAgent));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call udmUsersUserObjectRemoveValidateBeforeCall(String dn, Boolean cleanup, Boolean recursive, String userAgent, String acceptLanguage, String ifNoneMatch, String ifModifiedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dn' is set
        if (dn == null) {
            throw new ApiException("Missing the required parameter 'dn' when calling udmUsersUserObjectRemove(Async)");
        }

        return udmUsersUserObjectRemoveCall(dn, cleanup, recursive, userAgent, acceptLanguage, ifNoneMatch, ifModifiedSince, _callback);

    }

    /**
     * Remove a Users object
     *
     * @param dn The objects DN (urlencoded) (required)
     * @param cleanup Whether to perform a cleanup (e.g. of temporary objects, locks, etc). (optional, default to true)
     * @param recursive Whether to remove referring objects (e.g. DNS or DHCP references). (optional, default to true)
     * @param userAgent The user agent (optional)
     * @param acceptLanguage The accepted response languages (optional)
     * @param ifNoneMatch  (optional)
     * @param ifModifiedSince  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Object deleted </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
     </table>
     */
    public void udmUsersUserObjectRemove(String dn, Boolean cleanup, Boolean recursive, String userAgent, String acceptLanguage, String ifNoneMatch, String ifModifiedSince) throws ApiException {
        udmUsersUserObjectRemoveWithHttpInfo(dn, cleanup, recursive, userAgent, acceptLanguage, ifNoneMatch, ifModifiedSince);
    }

    /**
     * Remove a Users object
     *
     * @param dn The objects DN (urlencoded) (required)
     * @param cleanup Whether to perform a cleanup (e.g. of temporary objects, locks, etc). (optional, default to true)
     * @param recursive Whether to remove referring objects (e.g. DNS or DHCP references). (optional, default to true)
     * @param userAgent The user agent (optional)
     * @param acceptLanguage The accepted response languages (optional)
     * @param ifNoneMatch  (optional)
     * @param ifModifiedSince  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Object deleted </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> udmUsersUserObjectRemoveWithHttpInfo(String dn, Boolean cleanup, Boolean recursive, String userAgent, String acceptLanguage, String ifNoneMatch, String ifModifiedSince) throws ApiException {
        okhttp3.Call localVarCall = udmUsersUserObjectRemoveValidateBeforeCall(dn, cleanup, recursive, userAgent, acceptLanguage, ifNoneMatch, ifModifiedSince, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a Users object (asynchronously)
     *
     * @param dn The objects DN (urlencoded) (required)
     * @param cleanup Whether to perform a cleanup (e.g. of temporary objects, locks, etc). (optional, default to true)
     * @param recursive Whether to remove referring objects (e.g. DNS or DHCP references). (optional, default to true)
     * @param userAgent The user agent (optional)
     * @param acceptLanguage The accepted response languages (optional)
     * @param ifNoneMatch  (optional)
     * @param ifModifiedSince  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Object deleted </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call udmUsersUserObjectRemoveAsync(String dn, Boolean cleanup, Boolean recursive, String userAgent, String acceptLanguage, String ifNoneMatch, String ifModifiedSince, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = udmUsersUserObjectRemoveValidateBeforeCall(dn, cleanup, recursive, userAgent, acceptLanguage, ifNoneMatch, ifModifiedSince, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for udmUsersUserObjectSearch
     * @param filter A ldap filter which may contain &#x60;UDM&#x60; property names instead of &#x60;LDAP&#x60; attribute names. (optional, default to )
     * @param position Position which is used as search base. (optional)
     * @param scope The &#x60;LDAP&#x60; search scope (sub, base, one). (optional, default to sub)
     * @param query The values to search for (propertyname and search filter value). Alternatively with &#x60;filter&#x60; a raw ldap filter can be given. (optional)
     * @param hidden Include hidden/system objects in the response. (optional, default to true)
     * @param userAgent The user agent (optional)
     * @param acceptLanguage The accepted response languages (optional)
     * @param ifNoneMatch  (optional)
     * @param ifModifiedSince  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call udmUsersUserObjectSearchCall(String filter, String position, String scope, Object query, Boolean hidden, String userAgent, String acceptLanguage, String ifNoneMatch, String ifModifiedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/user/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (position != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position", position));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(query));
        }

        if (hidden != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hidden", hidden));
        }

        if (userAgent != null) {
            localVarHeaderParams.put("User-Agent", localVarApiClient.parameterToString(userAgent));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/hal+json",
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call udmUsersUserObjectSearchValidateBeforeCall(String filter, String position, String scope, Object query, Boolean hidden, String userAgent, String acceptLanguage, String ifNoneMatch, String ifModifiedSince, final ApiCallback _callback) throws ApiException {
        return udmUsersUserObjectSearchCall(filter, position, scope, query, hidden, userAgent, acceptLanguage, ifNoneMatch, ifModifiedSince, _callback);

    }

    /**
     * Search for Users
     * Information about the object type and links to search for objects. The found objects are either referenced as HAL links or embedded via HAL embedded resources.
     * @param filter A ldap filter which may contain &#x60;UDM&#x60; property names instead of &#x60;LDAP&#x60; attribute names. (optional, default to )
     * @param position Position which is used as search base. (optional)
     * @param scope The &#x60;LDAP&#x60; search scope (sub, base, one). (optional, default to sub)
     * @param query The values to search for (propertyname and search filter value). Alternatively with &#x60;filter&#x60; a raw ldap filter can be given. (optional)
     * @param hidden Include hidden/system objects in the response. (optional, default to true)
     * @param userAgent The user agent (optional)
     * @param acceptLanguage The accepted response languages (optional)
     * @param ifNoneMatch  (optional)
     * @param ifModifiedSince  (optional)
     * @return UsersUserList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
     </table>
     */
    public UsersUserList udmUsersUserObjectSearch(String filter, String position, String scope, Object query, Boolean hidden, String userAgent, String acceptLanguage, String ifNoneMatch, String ifModifiedSince) throws ApiException {
        ApiResponse<UsersUserList> localVarResp = udmUsersUserObjectSearchWithHttpInfo(filter, position, scope, query, hidden, userAgent, acceptLanguage, ifNoneMatch, ifModifiedSince);
        return localVarResp.getData();
    }

    /**
     * Search for Users
     * Information about the object type and links to search for objects. The found objects are either referenced as HAL links or embedded via HAL embedded resources.
     * @param filter A ldap filter which may contain &#x60;UDM&#x60; property names instead of &#x60;LDAP&#x60; attribute names. (optional, default to )
     * @param position Position which is used as search base. (optional)
     * @param scope The &#x60;LDAP&#x60; search scope (sub, base, one). (optional, default to sub)
     * @param query The values to search for (propertyname and search filter value). Alternatively with &#x60;filter&#x60; a raw ldap filter can be given. (optional)
     * @param hidden Include hidden/system objects in the response. (optional, default to true)
     * @param userAgent The user agent (optional)
     * @param acceptLanguage The accepted response languages (optional)
     * @param ifNoneMatch  (optional)
     * @param ifModifiedSince  (optional)
     * @return ApiResponse&lt;UsersUserList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<UsersUserList> udmUsersUserObjectSearchWithHttpInfo(String filter, String position, String scope, Object query, Boolean hidden, String userAgent, String acceptLanguage, String ifNoneMatch, String ifModifiedSince) throws ApiException {
        okhttp3.Call localVarCall = udmUsersUserObjectSearchValidateBeforeCall(filter, position, scope, query, hidden, userAgent, acceptLanguage, ifNoneMatch, ifModifiedSince, null);
        Type localVarReturnType = new TypeToken<UsersUserList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for Users (asynchronously)
     * Information about the object type and links to search for objects. The found objects are either referenced as HAL links or embedded via HAL embedded resources.
     * @param filter A ldap filter which may contain &#x60;UDM&#x60; property names instead of &#x60;LDAP&#x60; attribute names. (optional, default to )
     * @param position Position which is used as search base. (optional)
     * @param scope The &#x60;LDAP&#x60; search scope (sub, base, one). (optional, default to sub)
     * @param query The values to search for (propertyname and search filter value). Alternatively with &#x60;filter&#x60; a raw ldap filter can be given. (optional)
     * @param hidden Include hidden/system objects in the response. (optional, default to true)
     * @param userAgent The user agent (optional)
     * @param acceptLanguage The accepted response languages (optional)
     * @param ifNoneMatch  (optional)
     * @param ifModifiedSince  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call udmUsersUserObjectSearchAsync(String filter, String position, String scope, Object query, Boolean hidden, String userAgent, String acceptLanguage, String ifNoneMatch, String ifModifiedSince, final ApiCallback<UsersUserList> _callback) throws ApiException {

        okhttp3.Call localVarCall = udmUsersUserObjectSearchValidateBeforeCall(filter, position, scope, query, hidden, userAgent, acceptLanguage, ifNoneMatch, ifModifiedSince, _callback);
        Type localVarReturnType = new TypeToken<UsersUserList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for udmUsersUserObjectTemplate
     * @param userAgent The user agent (optional)
     * @param acceptLanguage The accepted response languages (optional)
     * @param ifNoneMatch  (optional)
     * @param ifModifiedSince  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call udmUsersUserObjectTemplateCall(String userAgent, String acceptLanguage, String ifNoneMatch, String ifModifiedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/user/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userAgent != null) {
            localVarHeaderParams.put("User-Agent", localVarApiClient.parameterToString(userAgent));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/hal+json",
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call udmUsersUserObjectTemplateValidateBeforeCall(String userAgent, String acceptLanguage, String ifNoneMatch, String ifModifiedSince, final ApiCallback _callback) throws ApiException {
        return udmUsersUserObjectTemplateCall(userAgent, acceptLanguage, ifNoneMatch, ifModifiedSince, _callback);

    }

    /**
     * Get a template for creating an object. Contains all properties and their default values.
     *
     * @param userAgent The user agent (optional)
     * @param acceptLanguage The accepted response languages (optional)
     * @param ifNoneMatch  (optional)
     * @param ifModifiedSince  (optional)
     * @return UsersUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
     </table>
     */
    public UsersUser udmUsersUserObjectTemplate(String userAgent, String acceptLanguage, String ifNoneMatch, String ifModifiedSince) throws ApiException {
        ApiResponse<UsersUser> localVarResp = udmUsersUserObjectTemplateWithHttpInfo(userAgent, acceptLanguage, ifNoneMatch, ifModifiedSince);
        return localVarResp.getData();
    }

    /**
     * Get a template for creating an object. Contains all properties and their default values.
     *
     * @param userAgent The user agent (optional)
     * @param acceptLanguage The accepted response languages (optional)
     * @param ifNoneMatch  (optional)
     * @param ifModifiedSince  (optional)
     * @return ApiResponse&lt;UsersUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<UsersUser> udmUsersUserObjectTemplateWithHttpInfo(String userAgent, String acceptLanguage, String ifNoneMatch, String ifModifiedSince) throws ApiException {
        okhttp3.Call localVarCall = udmUsersUserObjectTemplateValidateBeforeCall(userAgent, acceptLanguage, ifNoneMatch, ifModifiedSince, null);
        Type localVarReturnType = new TypeToken<UsersUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a template for creating an object. Contains all properties and their default values. (asynchronously)
     *
     * @param userAgent The user agent (optional)
     * @param acceptLanguage The accepted response languages (optional)
     * @param ifNoneMatch  (optional)
     * @param ifModifiedSince  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call udmUsersUserObjectTemplateAsync(String userAgent, String acceptLanguage, String ifNoneMatch, String ifModifiedSince, final ApiCallback<UsersUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = udmUsersUserObjectTemplateValidateBeforeCall(userAgent, acceptLanguage, ifNoneMatch, ifModifiedSince, _callback);
        Type localVarReturnType = new TypeToken<UsersUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for udmUsersUserObjectUpdate
     * @param dn The objects DN (urlencoded) (required)
     * @param usersUser  (required)
     * @param ifMatch provide entity tag to make a condition request to not overwrite any values in a race condition (optional)
     * @param ifUnmodifiedSince provide last modified time to make a condition request to not overwrite any values in a race condition (optional)
     * @param userAgent The user agent (optional)
     * @param acceptLanguage The accepted response languages (optional)
     * @param ifNoneMatch  (optional)
     * @param ifModifiedSince  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
        <tr><td> 201 </td><td> Success (on move and rename) </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call udmUsersUserObjectUpdateCall(String dn, UsersUser usersUser, String ifMatch, String ifUnmodifiedSince, String userAgent, String acceptLanguage, String ifNoneMatch, String ifModifiedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersUser;

        // create path and map variables
        String localVarPath = "/users/user/{dn}"
            .replace("{" + "dn" + "}", localVarApiClient.escapeString(dn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }

        if (userAgent != null) {
            localVarHeaderParams.put("User-Agent", localVarApiClient.parameterToString(userAgent));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        final String[] localVarAccepts = {
            "application/hal+json",
            "application/json",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/hal+json",
            "application/json",
            "text/html"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call udmUsersUserObjectUpdateValidateBeforeCall(String dn, UsersUser usersUser, String ifMatch, String ifUnmodifiedSince, String userAgent, String acceptLanguage, String ifNoneMatch, String ifModifiedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dn' is set
        if (dn == null) {
            throw new ApiException("Missing the required parameter 'dn' when calling udmUsersUserObjectUpdate(Async)");
        }

        // verify the required parameter 'usersUser' is set
        if (usersUser == null) {
            throw new ApiException("Missing the required parameter 'usersUser' when calling udmUsersUserObjectUpdate(Async)");
        }

        return udmUsersUserObjectUpdateCall(dn, usersUser, ifMatch, ifUnmodifiedSince, userAgent, acceptLanguage, ifNoneMatch, ifModifiedSince, _callback);

    }

    /**
     * Modify or move an User object
     *
     * @param dn The objects DN (urlencoded) (required)
     * @param usersUser  (required)
     * @param ifMatch provide entity tag to make a condition request to not overwrite any values in a race condition (optional)
     * @param ifUnmodifiedSince provide last modified time to make a condition request to not overwrite any values in a race condition (optional)
     * @param userAgent The user agent (optional)
     * @param acceptLanguage The accepted response languages (optional)
     * @param ifNoneMatch  (optional)
     * @param ifModifiedSince  (optional)
     * @return UsersUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
        <tr><td> 201 </td><td> Success (on move and rename) </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
     </table>
     */
    public UsersUser udmUsersUserObjectUpdate(String dn, UsersUser usersUser, String ifMatch, String ifUnmodifiedSince, String userAgent, String acceptLanguage, String ifNoneMatch, String ifModifiedSince) throws ApiException {
        ApiResponse<UsersUser> localVarResp = udmUsersUserObjectUpdateWithHttpInfo(dn, usersUser, ifMatch, ifUnmodifiedSince, userAgent, acceptLanguage, ifNoneMatch, ifModifiedSince);
        return localVarResp.getData();
    }

    /**
     * Modify or move an User object
     *
     * @param dn The objects DN (urlencoded) (required)
     * @param usersUser  (required)
     * @param ifMatch provide entity tag to make a condition request to not overwrite any values in a race condition (optional)
     * @param ifUnmodifiedSince provide last modified time to make a condition request to not overwrite any values in a race condition (optional)
     * @param userAgent The user agent (optional)
     * @param acceptLanguage The accepted response languages (optional)
     * @param ifNoneMatch  (optional)
     * @param ifModifiedSince  (optional)
     * @return ApiResponse&lt;UsersUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
        <tr><td> 201 </td><td> Success (on move and rename) </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<UsersUser> udmUsersUserObjectUpdateWithHttpInfo(String dn, UsersUser usersUser, String ifMatch, String ifUnmodifiedSince, String userAgent, String acceptLanguage, String ifNoneMatch, String ifModifiedSince) throws ApiException {
        okhttp3.Call localVarCall = udmUsersUserObjectUpdateValidateBeforeCall(dn, usersUser, ifMatch, ifUnmodifiedSince, userAgent, acceptLanguage, ifNoneMatch, ifModifiedSince, null);
        Type localVarReturnType = new TypeToken<UsersUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify or move an User object (asynchronously)
     *
     * @param dn The objects DN (urlencoded) (required)
     * @param usersUser  (required)
     * @param ifMatch provide entity tag to make a condition request to not overwrite any values in a race condition (optional)
     * @param ifUnmodifiedSince provide last modified time to make a condition request to not overwrite any values in a race condition (optional)
     * @param userAgent The user agent (optional)
     * @param acceptLanguage The accepted response languages (optional)
     * @param ifNoneMatch  (optional)
     * @param ifModifiedSince  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
        <tr><td> 201 </td><td> Success (on move and rename) </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
        <tr><td> 404 </td><td> Object not found </td><td>  * Cache-Control -  <br>  * Content-Language -  <br>  * Expires -  <br>  * Link -  <br>  * Vary -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call udmUsersUserObjectUpdateAsync(String dn, UsersUser usersUser, String ifMatch, String ifUnmodifiedSince, String userAgent, String acceptLanguage, String ifNoneMatch, String ifModifiedSince, final ApiCallback<UsersUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = udmUsersUserObjectUpdateValidateBeforeCall(dn, usersUser, ifMatch, ifUnmodifiedSince, userAgent, acceptLanguage, ifNoneMatch, ifModifiedSince, _callback);
        Type localVarReturnType = new TypeToken<UsersUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
