#!/bin/bash

# shellcheck source=/dev/null
[ -e /usr/share/univention-lib/ucr.sh ] && . /usr/share/univention-lib/ucr.sh

action=$1

FQDN=$(hostname -f)
REALM="UCS"
KEYCLOAK_URL="https://$(ucr get keycloak/url/prefix).$(hostname -f)"
# shellcheck disable=SC2034
LDAP_BASE="$(ucr get ldap/base)" 
UCS_LDAP_STORAGE_CONFIG_NAME="UCS LDAP"
# shellcheck disable=SC2034
UCS_LDAP_STORAGE_CONFIG_CONNECTION_URL="ldap://$FQDN:$(ucr get ldap/server/port)"
# shellcheck disable=SC2034
UCS_LDAP_STORAGE_CONFIG_BIND_DN="$(ucr get appcenter/apps/keycloak/hostdn)"
# shellcheck disable=SC2034
UCS_LDAP_STORAGE_CONFIG_BIND_CREDENTIAL="$(< /var/lib/univention-appcenter/apps/keycloak/machine.secret)"
UCS_LDAP_UID_MAPPER_CONFIG_NAME="UCS uid mapper"
UCS_SAML_CLIENT_CONFIG_NAME="UCS SAML client"
UCS_SAML_CLIENT_MAPPER_CONFIG_NAME="UCS SAML uid mapper"

export FQDN REALM KEYCLOAK_URL LDAP_BASE UCS_LDAP_STORAGE_CONFIG_NAME UCS_LDAP_STORAGE_CONFIG_CONNECTION_URL
export UCS_LDAP_STORAGE_CONFIG_BIND_DN UCS_LDAP_STORAGE_CONFIG_BIND_CREDENTIAL UCS_LDAP_UID_MAPPER_CONFIG_NAME
export CS_SAML_CLIENT_CONFIG_NAME UCS_SAML_CLIENT_MAPPER_CONFIG_NAME

# shellcheck disable=SC2016
UCS_REALM_CONFIG='{
    "id": "${REALM}",
    "realm": "${REALM}",
    "enabled": "true"
}'
# shellcheck disable=SC2016
UCS_SAML_CLIENT_CONFIG='{
    "clientId": "https://$(ucr get keycloak/url/prefix).${FQDN}/univention/saml/metadata",
    "name": "${UCS_SAML_CLIENT_CONFIG_NAME}",
    "description": "desc",
    "baseUrl": "https://$(ucr get keycloak/url/prefix).${FQDN}/univention/",
    "enabled": true,
    "alwaysDisplayInConsole": false,
    "redirectUris": [
      "https://$(ucr get keycloak/url/prefix).${FQDN}/univention/*"
    ],
    "webOrigins": [],
    "notBefore": 0,
    "bearerOnly": false,
    "consentRequired": false,
    "standardFlowEnabled": true,
    "implicitFlowEnabled": false,
    "directAccessGrantsEnabled": false,
    "serviceAccountsEnabled": false,
    "publicClient": false,
    "frontchannelLogout": true,
    "protocol": "saml",
    "attributes": {
      "saml.force.post.binding": "true",
      "saml.multivalued.roles": "false",
      "saml.server.signature.keyinfo.ext": "false",
      "saml.client.signature": "false",
      "saml.assertion.signature": "true",
      "saml_single_logout_service_url_post": "https://$(ucr get keycloak/url/prefix).${FQDN}/univention/saml/slo/",
      "saml.encrypt": "false",
      "saml.server.signature": "true",
      "saml.authnstatement": "true",
      "saml_name_id_format": "transient",
      "saml.assertion.lifespan": "300"
    }
}'
# shellcheck disable=SC2016
UCS_SAML_CLIENT_MAPPER_CONFIG='{
    "name": "${UCS_SAML_CLIENT_MAPPER_CONFIG_NAME}",
    "protocol": "saml",
    "protocolMapper": "saml-user-attribute-mapper",
    "consentRequired": false,
    "config": {
      "attribute.nameformat": "URI Reference",
      "user.attribute": "uid",
      "friendly.name": "uid",
      "attribute.name": "urn:oid:0.9.2342.19200300.100.1.1"
    }
}'
# shellcheck disable=SC2016
UCS_LDAP_STORAGE_CONFIG='{
	"name":"${UCS_LDAP_STORAGE_CONFIG_NAME}",
	"providerId":"ldap",
	"providerType":"org.keycloak.storage.UserStorageProvider",
	"parentId":"${REALM}",
	"config":{

		"fullSyncPeriod": ["-1"],
		"enabled":["true"],
		"priority":["0"],
		"fullSyncPeriod":["-1"],
		"changedSyncPeriod":["-1"],
		"cachePolicy":["DEFAULT"],
		"batchSizeForSync":["1000"],
		"editMode":["READ_ONLY"],
		"importEnabled":["false"],
		"syncRegistrations":["false"],
		"vendor":["other"],
		"usePasswordModifyExtendedOp":[],
		"usernameLDAPAttribute":["uid"],
		"rdnLDAPAttribute":["uid"],
		"uuidLDAPAttribute":["entryUUID"],
		"userObjectClasses":["organizationalPerson"],
		"connectionUrl":["${UCS_LDAP_STORAGE_CONFIG_CONNECTION_URL}"],
		"usersDn":["${LDAP_BASE}"],
		"authType":["simple"],
		"startTls":["true"],
		"bindDn":["${UCS_LDAP_STORAGE_CONFIG_BIND_DN}"],
		"bindCredential":["${UCS_LDAP_STORAGE_CONFIG_BIND_CREDENTIAL}"],
		"customUserSearchFilter":[],
		"searchScope":["1"],
		"validatePasswordPolicy":["false"],
		"searchScope": [ "2" ],
		"trustEmail":["false"],
		"useTruststoreSpi":["always"],
		"pagination":["true"],
		"allowKerberosAuthentication":["false"],
		"connectionPooling": [ "true" ],
		"trustEmail": [ "false" ]
	}
}'
# shellcheck disable=SC2016
UCS_LDAP_UID_MAPPER_CONFIG='{
    "name": "${UCS_LDAP_UID_MAPPER_CONFIG_NAME}",
    "providerId": "user-attribute-ldap-mapper",
    "providerType": "org.keycloak.storage.ldap.mappers.LDAPStorageMapper",
    "parentId": "${UCS_LDAP_STORAGE_ID}",
    "config": {
      "ldap.attribute": ["uid"],
      "is.mandatory.in.ldap": ["true"],
      "is.binary.attribute": ["false"],
      "read.only": ["true"],
      "user.model.attribute": ["uid"]
    }
  }'


get_admin_token() {
	curl -s --request POST "$KEYCLOAK_URL/auth/realms/master/protocol/openid-connect/token" \
		-H "Content-Type: application/x-www-form-urlencoded" \
		-d "client_id=admin-cli" \
		-d "username=$(ucr get keycloak/admin/user)" \
		-d "password=$(< /etc/keycloak.secret)" \
		-d "grant_type=password" | jq -r '.access_token'
}

curl_data () {
	local request="$1"
	local url="$2"
	local data="$3"
	curl -s --request "$request" "$KEYCLOAK_URL/$url" \
		-H 'Content-Type: application/json' \
		-H "Authorization: Bearer $(get_admin_token)" \
		--data-raw "$(echo "$data" | envsubst)"
}

curl_get () {
	local url="$1"
	curl -s --request GET "$KEYCLOAK_URL/$url" \
		-H 'Content-Type: application/json' \
		-H "Authorization: Bearer $(get_admin_token)"
}

add_realm () {
	local realm="$1"
	local data="$2"	
	curl_data POST "$KEYCLOAK_URL/auth/admin/realms" "$data"
}

update_realm () {
	local realm="$1"
	local data="$2"	
	curl_data PUT "auth/admin/realms/$realm" "$data"
}

get_realm () {
	local realm="$1"
	curl_get "auth/admin/realms/$realm"
}

get_components () {
	local realm="$1"
	curl_get "auth/admin/realms/$realm/components"
}

update_component () {
	local realm="$1"
	local component_id="$2"
	local data="$3"
	curl_data PUT "auth/admin/realms/$realm/components/$component_id" "$data"
}

add_component () {
	local realm="$1"
	local data="$2"
	curl_data POST "auth/admin/realms/${realm}/components" "$data"
}


get_clients () {
	local realm="$1"
	curl_get "auth/admin/realms/$realm/clients"
}

add_client () {
	local realm="$1"
	local data="$2"
	curl_data POST "auth/admin/realms/$realm/clients" "$data"
}

update_client () {
	local realm="$1"
	local client_id="$2"
	local data="$3"
	curl_data PUT "auth/admin/realms/$realm/clients/$client_id" "$data"
}

add_client_mapper () {
	local realm="$1"
	local client_id="$2"
	local data="$3"
	curl_data POST "auth/admin/realms/$realm/clients/$client_id/protocol-mappers/models" "$data"
}

update_client_mapper () {
	local realm="$1"
	local client_id="$2"
	local mapper_id="$3"
	local data="$4"
	curl_data PUT "auth/admin/realms/$realm/clients/$client_id/protocol-mappers/models/$mapper_id" "$data"
}

get_client_mappers () {
	local realm="$1"
	local client_id="$2"
	curl_get "auth/admin/realms/$realm/clients/$client_id/protocol-mappers/models"
}

get_component_id_by_name () {
	local realm="$1"
	local name="$2"
	get_components "$realm" | jq -r '.[] | select (.name == "'"$name"'") | .id'
}

get_client_id_by_name () {
	local realm="$1"
	local name="$2"
	get_clients "$realm" | jq -r '.[] | select (.name == "'"$name"'") | .id'
}

get_client_mapper_id_by_name () {
	local realm="$1"
	local client_id="$2"
	local name="$3"
	get_client_mappers "$realm" "$client_id" | jq -r '.[] | select (.name == "'"$name"'")| .id'
}


setup_ucs () {
	# add/update realm
	realm_id="$(get_realm "$REALM" | jq -r 'select (.realm == "'"$REALM"'")| .id')"
	if [ -n "$realm_id" ]; then
		update_realm "$REALM" "$UCS_REALM_CONFIG"
	else
		add_realm "$REALM" "$UCS_REALM_CONFIG"
	fi
	# create/update UCS LDAP federation component
	ucs_ldap_provider_id="$(get_component_id_by_name "$REALM" "$UCS_LDAP_STORAGE_CONFIG_NAME")"
	if [ -n "$ucs_ldap_provider_id" ]; then
		update_component "$REALM" "$ucs_ldap_provider_id" "$UCS_LDAP_STORAGE_CONFIG"
	else
		add_component "$REALM" "$UCS_LDAP_STORAGE_CONFIG"
	fi
	# create mapper for UCS LDAP federation component
	mapper_id="$(get_component_id_by_name "$REALM" "$UCS_LDAP_UID_MAPPER_CONFIG_NAME")"
	UCS_LDAP_STORAGE_ID="$(get_component_id_by_name "$REALM" "$UCS_LDAP_STORAGE_CONFIG_NAME")"
	export UCS_LDAP_STORAGE_ID
	if [ -n "$mapper_id" ]; then
		update_component "$REALM" "$mapper_id" "$UCS_LDAP_UID_MAPPER_CONFIG"
	else
		add_component "$REALM" "$UCS_LDAP_UID_MAPPER_CONFIG"
	fi
	# create update SAML client for UCS
	client_id="$(get_client_id_by_name "$REALM" "$UCS_SAML_CLIENT_CONFIG_NAME")"
	if [ -n "$client_id" ]; then
		update_client "$REALM" "$client_id" "$UCS_SAML_CLIENT_CONFIG"
	else
		add_client "$REALM" "$UCS_SAML_CLIENT_CONFIG"
	fi
	client_id="$(get_client_id_by_name "$REALM" "$UCS_SAML_CLIENT_CONFIG_NAME")"
	client_mapper_id="$(get_client_mapper_id_by_name "$REALM" "$client_id" "$UCS_SAML_CLIENT_MAPPER_CONFIG_NAME")"
	if [ -n "$client_mapper_id" ]; then
		update_client_mapper "$REALM" "$client_id" "$client_mapper_id" "$UCS_SAML_CLIENT_MAPPER_CONFIG"
	else
		add_client_mapper "$REALM" "$client_id" "$UCS_SAML_CLIENT_MAPPER_CONFIG"
	fi
	# use keycloak as SAML IDP in UMC
	ucr set umc/saml/idp-server="$KEYCLOAK_URL/auth/realms/$REALM/protocol/saml/descriptor"
}

apache_config () {
	# create apache config
	mkdir -p  /var/lib/univention-appcenter/apps/keycloak/config/
	cat << "EOF" > /var/lib/univention-appcenter/apps/keycloak/config/vhost.conf
ProxyPreserveHost On
SSLProxyEngine On
SSLProxyCheckPeerCN on
SSLProxyCheckPeerExpire on
RequestHeader set X-Forwarded-Proto "https"
RequestHeader set X-Forwarded-Port "443"
ProxyPass / http://127.0.0.1:8080/
ProxyPassReverse / http://127.0.0.1:8080/
EOF
}

theme_config() {
	THEME_DIR="/usr/share/univention-web/themes"
	THEME_SRC="$THEME_DIR/$(basename "$(ucr get keycloak/theme)").css"
	THEME_DST="/var/lib/univention-appcenter/apps/keycloak/conf/UCS/login/resources/css/theme.css"
	if [ ! -e "$THEME_SRC" ]; then
        echo "$THEME_SRC does not exist"
        exit 1
	fi

	[ -e "$THEME_DST" ] && rm "$THEME_DST"
	cp "$THEME_SRC" "$THEME_DST"
}

if [ -n "$action" ] && [ "$action" = "remove" ]; then 
    exit 0
fi

apache_config
theme_config

#if is_ucr_true keycloak/ucs/setup; then
#	setup_ucs
#fi

if [ "$action" = "settings" ]; then
    univention-app reinitialize keycloak
fi