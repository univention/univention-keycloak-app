# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2023-2024 Univention GmbH

---
variables:
  SECURITY_MONITORING:
    value: "no"
    options:
      - "yes"
      - "no"
    description: "Set to yes if you want to run the security monitoring jobs"
  # version
  PACKAGE_REGISTRY: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/keycloak-tar"
  # Documentation build uses this variable to set the release version of the document
  KEYCLOAK_VERSION: "26.2.5"
  # this is where we get keycloak from
  KEYCLOAK_SOURCE: "https://github.com/keycloak/keycloak/releases/download/$KEYCLOAK_VERSION/keycloak-$KEYCLOAK_VERSION.tar.gz"
  # this is where we keycloak store and use from during the image build
  KEYCLOAK_DIST: "${PACKAGE_REGISTRY}/$KEYCLOAK_VERSION/keycloak-$KEYCLOAK_VERSION.tar.gz"
  # Documentation build uses this variable to determine the artifact output directory.
  DOC_TARGET_VERSION: "${KEYCLOAK_VERSION}"
  LATEST_RELEASED_KEYCLOAK_VERSION: "26.2.5-ucs1"

include:
  - project: "univention/dev/nubus-for-k8s/common-ci"
    ref: "v1.42.1"
    file:
      - "defaults/stages.yaml"
      - "defaults/nubus-workflow.yaml"
      - "jobs/semantic-release-env.yaml"
      - "jobs/container-build-external.yaml"

  - project: "univention/infrastructure/docker-services"
    ref: "master"
    file:
      - "dind.yml"

  - local: /.gitlab-ci/gitlab-ci.yml
    rules:
      - if: $SECURITY_MONITORING != "yes"
  - local: /.gitlab-ci/gitlab-ci-sec.yml
    rules:
      - if: $SECURITY_MONITORING == "yes"

.build-matrix: &build-matrix
  - IMAGE_NAME: "keycloak"
    DOCKERFILE_PATH: "./Dockerfile"
    KANIKO_BUILD_CONTEXT: "./"
    KANIKO_ARGS: "--cache=true --cache-repo=$CI_REGISTRY_IMAGE/cache --build-arg KEYCLOAK_VERSION=$KEYCLOAK_VERSION --build-arg KEYCLOAK_DIST=$KEYCLOAK_DIST"

.publish-matrix: &publish-matrix
  - IMAGE_NAME:
      - "keycloak"

container-build:
  parallel:
    matrix: *build-matrix

container-malware-scan:
  parallel:
    matrix: *publish-matrix

container-sign-external:
  parallel:
    matrix: *build-matrix

push-image-external:
  parallel:
    matrix: *publish-matrix

test-udm-unit-and-integration::
  needs: []
  stage: test
  extends: .dind
  image: "${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:24.0.7"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: "never"
    - when: "on_success"
  before_script:
    - cd extensions/tests
    # Allow that the Docker API version is negotiated between client and server
    - unset DOCKER_API_VERSION
    - export IMAGE_TAG=${RELEASE_VERSION}
    - echo -e "\e[0Ksection_start:`date +%s`:docker_debug[collapsed=true]\r\e[0KDocker version details"
    - echo $IMAGE_TAG
    - docker version
    - echo -e "\e[0Ksection_end:`date +%s`:docker_debug\r\e[0K"
    - echo -e "\e[0Ksection_start:`date +%s`:docker_compose_config[collapsed=true]\r\e[0KDocker Compose configuration"
    - docker compose config test
    - echo -e "\e[0Ksection_end:`date +%s`:docker_compose_config\r\e[0K"
    - docker compose up --no-build --quiet-pull --wait --wait-timeout 60 ldap-server udm-rest-api
  script:
    - docker compose run --quiet-pull test
  after_script:
    - docker logs ldap-server >& ldap-server.log
    - docker logs udm-rest-api >& udm-rest-api.log
    - docker compose down --volumes
  artifacts:
    paths:
      - ldap-server.log
      - udm-rest-api.log
    expire_in: "1 day"
    when: "always"
    expose_as: "docker compose server logs"

