stages:
  - test
  - prepare
  - build
  - merge
  - production

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_PIPELINE_SOURCE == "webide"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_OPEN_MERGE_REQUESTS
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_PROTECTED == "true"

include:
  - project: univention/dist/docker-services
    file:
      - kaniko.yml
      - pre-commit.yml
  - template: Security/Container-Scanning.gitlab-ci.yml

variables:
  # version
  DOC_TARGET_VERSION: "22.0.3"

container_scanning:
  variables:
    CS_IMAGE: gitregistry.knut.univention.de/univention/components/keycloak-app:branch-ucs-base-image

.dockerconfigjson: &dockerconfigjson
  - "mkdir -p ~/.docker"
  - |
    cat << EOF > ~/.docker/config.json
    {
      "auths": {
        "$CI_REGISTRY": {
          "auth": "$(printf %s:%s ${CI_REGISTRY_USER} ${CI_REGISTRY_PASSWORD} | base64 | tr -d '\n')"
        },
        "$CI_DEPENDENCY_PROXY_SERVER": {
          "auth": "$(printf %s:%s ${CI_DEPENDENCY_PROXY_USER} ${CI_DEPENDENCY_PROXY_PASSWORD} | base64 | tr -d '\n')"
        }
      }
    }
    EOF

#pre-commit:
#  stage: test
#  extends: .pre-commit
#
#generate-config:
#  stage: prepare
#  image:
#    name: docker-registry.knut.univention.de/knut/deb-builder
#    entrypoint: [""]
#  script:
#    - .gitlab-ci/build-ci
#  artifacts:
#    paths:
#      - generated-config-doc.yml

#doc-pipeline:
#  stage: build
#  rules:
#    - changes:
#      - "docs/keycloak-app/**/*"
#      - "docs/keycloak-migration/**/*"
#  needs:
#    - job: generate-config
#  trigger:
#    include:
#      - artifact: generated-config-doc.yml
#        job: generate-config
#    strategy: depend
#    forward:
#      pipeline_variables: true

    #image_build:
    #  stage: build
    #  extends: .kaniko
    #  rules:
    #    - changes:
    #      - ad-hoc/**/*
    #      - dependencies/**/*
    #      - Dockerfile
    #      - files/**/*
    #      - univention-ldap-mapper/**/*
    #      - .gitlab-ci.yml
    #  variables:
    #    KANIKO_ARGS: --build-arg commit="$CI_COMMIT_SHA" --build-arg date="$CI_JOB_STARTED_AT" --cache=true --cache-repo=$CI_REGISTRY_IMAGE/cache
    #
    #sbom:
    #  stage: build
    #  variables:
    #    IMAGE_SYFT: "${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/anchore/syft:v0.93.0-debug"
    #  cache:
    #    - key: "container-sbom-${CI_COMMIT_REF_SLUG}"
    #      paths:
    #        - "${CI_PROJECT_DIR}/sbom.cdx.json"
    #      policy: "push"
    #    - key: "container-build-${CI_COMMIT_REF_SLUG}"
    #      paths:
    #        - "${CI_PROJECT_DIR}/digest"
    #      policy: "pull"
    #  image:
    #    name: "${IMAGE_SYFT}"
    #    entrypoint: [""]
    #  needs:
    #    - "image_build"
    #  script:
    #    - "env"
    #    - "/syft --scope all-layers -o spdx-json ${IMAGE_TAG} > ${CI_PROJECT_DIR}/sbom.cdx.json"
    #    - "/syft --scope all-layers ${IMAGE_TAG}"
    #
    #add-sbom:
    #  variables:
    #    IMAGE_COSIGN: "${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/bitnami/cosign:2.0.2"
    #  before_script:
    #    - *dockerconfigjson
    #  cache:
    #    - key: "container-sbom-${CI_COMMIT_REF_SLUG}"
    #      paths:
    #        - "${CI_PROJECT_DIR}/sbom.cdx.json"
    #      policy: "pull"
    #    - key: "container-build-${CI_COMMIT_REF_SLUG}"
    #      paths:
    #        - "${CI_PROJECT_DIR}/digest"
    #      policy: "pull"
    #  image:
    #    name: "${IMAGE_COSIGN}"
    #    entrypoint: [""]
    #  needs:
    #    - "image_build"
    #    - "sbom"
    #  script:
    #    - "cosign attach sbom --type=spdx --input-format=json --sbom=sbom.cdx.json ${IMAGE_TAG}"
    #  stage: "build"

ccontainer_scanning:
  stage: build
  image:
    name: "${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/aquasec/trivy:latest"
    entrypoint: [""]
  variables:
    # No need to clone the repo, we exclusively work on artifacts.  See
    # https://docs.gitlab.com/ee/ci/runners/README.html#git-strategy
    GIT_STRATEGY: none
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    TRIVY_AUTH_URL: "$CI_REGISTRY"
    TRIVY_CACHE_DIR: ".trivycache/"
    TRIVY_NO_PROGRESS: "false"
    #FULL_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    #FULL_IMAGE_NAME: "gitregistry.knut.univention.de/univention/components/keycloak-app:branch-image-tools"
    FULL_IMAGE_NAME: "gitregistry.knut.univention.de/univention/components/keycloak-app:branch-ucs-base-image"
  script:
    - env

    - trivy --version
    # cache cleanup is needed when scanning images with the same tags, it does not remove the database
    - time trivy image --clear-cache
    # update vulnerabilities db
    - time trivy image --download-db-only
    # Image report
    - time trivy image --exit-code 0 --format template --template "@/contrib/gitlab-codequality.tpl"
        --output gl-codeclimate.json "$FULL_IMAGE_NAME"
    #- ./trivy filesystem --scanners config,vuln --exit-code 0 --format template --template "@contrib/gitlab-codequality.tpl" -o gl-codeclimate-fs.json .
    ## Combine report
    #- apk update && apk add jq
    #- jq -s 'add' gl-codeclimate-image.json gl-codeclimate-fs.json > gl-codeclimate.json
    # Prints full report
    - time trivy image --exit-code 0 "$FULL_IMAGE_NAME"
    # Fail on critical vulnerabilities
    - time trivy image --exit-code 1 --severity CRITICAL "$FULL_IMAGE_NAME"
  cache:
    paths:
      - .trivycache/
  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab EE Ultimate or GitLab.com Gold)
  artifacts:
    paths:
      - gl-codeclimate.json
    reports:
      codequality: gl-codeclimate.json
