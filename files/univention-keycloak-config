#!/usr/bin/python3

import argparse
from keycloak import KeycloakAdmin
from univention.config_registry import ConfigRegistry
from univention.config_registry.frontend import ucr_update


def check_and_create_component(kc_client, name, prov_id, payload_):
	ldap_component_filter = {'name': name, 'providerId': prov_id}
	ldap_component_list = kc_client.get_components(ldap_component_filter)
	if not ldap_component_list:
		kc_client.create_component(payload=payload_)
		ldap_component_list = kc_client.get_components(ldap_component_filter)

	ldap_component = ldap_component_list.pop()
	return ldap_component.get("id")


def get_realm_id(kc_client, name):
	ldap_realms_list = kc_client.get_realms()
	# search for realm "name"
	realm_info = list(filter(lambda realm: realm["realm"] == name, ldap_realms_list))
	# return realm id
	return realm_info[0]["id"]


if __name__ == "__main__":
	parser = argparse.ArgumentParser(description='Keycloak Autoconfig')

	parser.add_argument("--binddn", default="Administrator")
	parser.add_argument("--bindpwdfile", default="univention")

	args = parser.parse_args()

	# load UCR
	ucr = ConfigRegistry()
	ucr.load()
	hostname = ucr.get("hostname")
	domain = ucr.get("domainname")
	locales_ucr = ucr.get("locale").split()
	locales_format = [locale[:locale.index("_")] for locale in locales_ucr]
	default_locale_ucr = ucr.get("locale/default")
	default_locale = default_locale_ucr[:default_locale_ucr.index("_")]

	role = ucr.get("server/role")
	if role == "domaincontroller_master":
		pwdfile = "/etc/idp-ldap-user.secret"
		with open(pwdfile, 'r') as fd:
			kc_service_pass = fd.read().strip()
		kc_service_user = "sys-idp-user"
	else:
		kc_service_user = args.binddn
		kc_service_pass = args.bindpwdfile

	kc_admin_user = "admin"
	pwdfile = "/etc/keycloak.secret"
	with open(pwdfile, 'r') as fd:
		kc_admin_pass = fd.read().strip()

	# realm config #
	realm_name = "ucs"
	default_realm = "master"

	# client config #
	client_id_location = "/univention/saml/metadata"
	valid_redirect_urls = ""

	# user federation
	ucs_user_dn = ""
	ucs_ldap_pass = ""
	ucs_bind_dn = ""
	ucs_ldap_url = "ldap://{}.{}:7389".format(hostname, domain)  # "ldap://{FQDN}:{port}"

	# saml descriptor location #
	saml_descriptor_location = "/realms/{}/protocol/saml/descriptor".format(realm_name)

	ldap_hostdn = ucr.get("ldap/hostdn")
	user_dn = ldap_hostdn[ldap_hostdn.index(",dc="):][1:]
	bind_dn = "uid={udm_service_user},cn=users,{user_dn}".format(udm_service_user=kc_service_user, user_dn=user_dn)

	print("Using bind-dn: {}".format(bind_dn))

	if ucs_user_dn:
		user_dn = ucs_user_dn
	if ucs_bind_dn:
		bind_dn = ucs_bind_dn

	# derived composite vars #
	if hostname and not hostname == "unassigned-hostname":
		server_fdnq_with_subdomain = "https://keycloak.{}.{}".format(hostname, domain)
		server_fdnq_without_subdomain = "https://{}.{}".format(hostname, domain)
	else:
		server_fdnq_with_subdomain = "https://keycloak.{}".format(domain)
		server_fdnq_without_subdomain = "https://{}".format(domain)

	# valid redirect uris #
	if valid_redirect_urls:
		valid_redirect_urls = valid_redirect_urls
	else:
		valid_redirect_urls = [server_fdnq_without_subdomain + "/univention/saml/"]

	# build kc admin session #
	kc_admin_auth_url = "{}".format(server_fdnq_with_subdomain)
	print("Using KC_URL: {}".format(kc_admin_auth_url))

	# log into default realm in case UCS realm doesn't exist yet #
	kc_admin = KeycloakAdmin(server_url=kc_admin_auth_url, username=kc_admin_user, password=kc_admin_pass, realm_name=realm_name, user_realm_name=default_realm, verify=True)

	# set locale languages #
	realm_payload = {
		"id": default_realm,
		"realm": default_realm,
		"enabled": True,
		"internationalizationEnabled": True,
		"supportedLocales": locales_format,
		"defaultLocale": default_locale,
		"adminTheme": "keycloak",
		"accountTheme": "keycloak",
		"emailTheme": "keycloak",
		"loginTheme": "UCS",
		"browserSecurityHeaders": {
			"contentSecurityPolicyReportOnly": "",
			"xContentTypeOptions": "nosniff",
			"xRobotsTag": "none",
			"xFrameOptions": "",
			"contentSecurityPolicy": "frame-src 'self'; frame-ancestors 'self' {}/univention; object-src 'none';".format(server_fdnq_without_subdomain),
			"xXSSProtection": "1; mode=block",
			"strictTransportSecurity": "max-age=31536000; includeSubDomains"
		}
	}
	kc_admin.update_realm(default_realm, payload=realm_payload)

	# create ucs realm #
	realm_payload["id"] = realm_name
	realm_payload["realm"] = realm_name
	kc_admin.create_realm(payload=realm_payload, skip_exists=True)

	# create client #
	client_id = server_fdnq_without_subdomain + client_id_location
	print("Client ID: {}".format(client_id))

	# build urls #
	single_logout_service_url_post = server_fdnq_without_subdomain + "/univention/saml/slo/"
	single_logout_service_url_redirect = server_fdnq_without_subdomain + "/univention/saml/slo/"
	assertion_consumer_url_post = server_fdnq_without_subdomain + "/univention/saml/"
	kc_descriptor_url = server_fdnq_with_subdomain + saml_descriptor_location

	client_payload = {
		"clientId": client_id,
		"surrogateAuthRequired": False,
		"enabled": True,
		"alwaysDisplayInConsole": False,
		"clientAuthenticatorType": "client-secret",
		"redirectUris": valid_redirect_urls,
		"webOrigins": [],
		"notBefore": 0,
		"bearerOnly": False,
		"consentRequired": False,
		"standardFlowEnabled": True,
		"implicitFlowEnabled": False,
		"directAccessGrantsEnabled": True,
		"serviceAccountsEnabled": False,
		"publicClient": True,
		"frontchannelLogout": True,
		"protocol": "saml",
		"attributes": {
			"saml.multivalued.roles": "false",
			"saml.force.post.binding": "true",
			"oauth2.device.authorization.grant.enabled": "false",
			"backchannel.logout.revoke.offline.tokens": "false",
			"saml.server.signature.keyinfo.ext": "false",
			"use.refresh.tokens": "true",
			"oidc.ciba.grant.enabled": "false",
			"backchannel.logout.session.required": "true",
			"client_credentials.use_refresh_token": "false",
			"saml.signature.algorithm": "RSA_SHA256",
			"saml.client.signature": "false",
			"require.pushed.authorization.requests": "false",
			"id.token.as.detached.signature": "false",
			"saml.assertion.signature": "true",
			"saml_single_logout_service_url_post": single_logout_service_url_post,
			"saml.encrypt": "false",
			"saml_assertion_consumer_url_post": assertion_consumer_url_post,
			"saml.server.signature": "true",
			"exclude.session.state.from.auth.response": "false",
			"saml.artifact.binding.identifier": "JOtItQNol3ThXjMMWI3gcbW92sU=",
			"saml.artifact.binding": "false",
			"saml_single_logout_service_url_redirect": single_logout_service_url_redirect,
			"saml_force_name_id_format": "false",
			"tls.client.certificate.bound.access.tokens": "false",
			"acr.loa.map": "{}",
			"saml.authnstatement": "true",
			"display.on.consent.screen": "false",
			"saml.assertion.lifespan": "300",
			"token.response.type.bearer.lower-case": "false",
			"saml.onetimeuse.condition": "false",
			"saml_signature_canonicalization_method": "http://www.w3.org/2001/10/xml-exc-c14n#"
		},
		"authenticationFlowBindingOverrides": {},
		"fullScopeAllowed": True,
		"nodeReRegistrationTimeout": -1,
		"protocolMappers": [
			{
				"name": "userid_mapper",
				"protocol": "saml",
				"protocolMapper": "saml-user-attribute-mapper",
				"consentRequired": False,
				"config": {
					"attribute.nameformat": "URI Reference",
					"user.attribute": "uid",
					"friendly.name": "uid",
					"attribute.name": "urn:oid:0.9.2342.19200300.100.1.1"
				}
			}
		],
		"defaultClientScopes": [
			"role_list"
		],
		"optionalClientScopes": [],
		"access": {
			"view": True,
			"configure": True,
			"manage": True
		}
	}
	kc_admin.create_client(payload=client_payload, skip_exists=True)

	# user federation ldap provider payload#
	ldap_federation_payload = {
		"name": "ldap-provider",
		"providerId": "ldap",
		"providerType": "org.keycloak.storage.UserStorageProvider",
		"parentId": get_realm_id(kc_admin, realm_name),
		"config": {
			"pagination": ["true"],
			"fullSyncPeriod": ["-1"],
			"startTls": ["false"],
			"connectionPooling": ["true"],
			"usersDn": [user_dn],
			"cachePolicy": ["MAX_LIFESPAN"],
			"maxLifespan": ["300000"],
			"useKerberosForPasswordAuthentication": ["false"],
			"importEnabled": ["false"],
			"enabled": ["true"],
			"bindCredential": [kc_service_pass],
			"bindDn": [bind_dn],
			"changedSyncPeriod": ["-1"],
			"usernameLDAPAttribute": ["uid"],
			"vendor": ["other"],
			"uuidLDAPAttribute": ["entryUUID"],
			"allowKerberosAuthentication": ["false"],
			"connectionUrl": [ucs_ldap_url],
			"syncRegistrations": ["false"],
			"authType": ["simple"],
			"debug": ["false"],
			"searchScope": ["2"],
			"useTruststoreSpi": ["ldapsOnly"],
			"usePasswordModifyExtendedOp": ["true"],
			"trustEmail": ["false"],
			"priority": ["0"],
			"userObjectClasses": ["inetOrgPerson, organizationalPerson"],
			"rdnLDAPAttribute": ["uid"],
			"editMode": ["READ_ONLY"],
			"validatePasswordPolicy": ["false"],
			"batchSizeForSync": ["1000"]
		}
	}

	# find existing ldap provider or just create if none exists #
	ldap_component_id = check_and_create_component(kc_admin, ldap_federation_payload["name"], ldap_federation_payload["providerId"], ldap_federation_payload)
	print("LDAP User Federation Added: {}".format(ucs_ldap_url))

	# User federation mapper (LDAP) #
	payload_ldap_mapper = {
		"name": "uid",
		"parentId": ldap_component_id,
		"providerId": "user-attribute-ldap-mapper",
		"providerType": "org.keycloak.storage.ldap.mappers.LDAPStorageMapper",
		"config": {
			"ldap.attribute": [
				"uid"
			],
			"is.mandatory.in.ldap": [
				"false"
			],
			"read.only": [
				"true"
			],
			"user.model.attribute": [
				"uid"
			]
		}
	}

	# find existing uid->uid mapper or create if none exits #
	check_and_create_component(kc_admin, payload_ldap_mapper["name"], payload_ldap_mapper["providerId"], payload_ldap_mapper)

	# Setting admin level to all Domain Admins #
	# Change realm to master
	kc_admin.realm_name = default_realm

	# Admins federation ldap provider payload #
	ldap_federation_payload["name"] = "ldap-master-admin"
	ldap_federation_payload["parentId"] = get_realm_id(kc_admin, default_realm)
	ldap_federation_payload["config"]["customUserSearchFilter"] = ["(memberOf=cn=Domain Admins,cn=groups,{dn})".format(dn=user_dn)]

	# find existing ldap provider or just create if none exists #
	ldap_component_id = check_and_create_component(kc_admin, ldap_federation_payload["name"], ldap_federation_payload["providerId"], ldap_federation_payload)
	print("LDAP Domain Admins Federation Added: {}".format(ucs_ldap_url))
	print("Filter: {}".format(ldap_federation_payload["config"]["customUserSearchFilter"]))

	payload_ldap_mapper["name"] = "admin-role"
	payload_ldap_mapper["parentId"] = ldap_component_id
	payload_ldap_mapper["providerId"] = "hardcoded-ldap-role-mapper"
	payload_ldap_mapper["config"] = {"role": ["admin"]}

	# find existing mapper or create if none exits #
	check_and_create_component(kc_admin, payload_ldap_mapper["name"], payload_ldap_mapper["providerId"], payload_ldap_mapper)

	# set umc/saml/idp-server # TODO: Remove
#	ucr_update(ucr, {"umc/saml/idp-server": kc_descriptor_url})
