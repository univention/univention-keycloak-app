@%@UCRWARNING=# @%@

@!@

def print_virthost_config(virtconf):
        print('''
<IfModule mod_ssl.c>
<VirtualHost *:443>
    ServerName %(fqdn)s

    SSLEngine on
    SSLProxyEngine on
    SSLCertificateFile %(ssl_certificate)s
    SSLCertificateKeyFile %(ssl_certificate_key)s
    SSLCACertificateFile %(ssl_ca_certificate)s

    %(proxy_config)s

    RewriteEngine on
    RewriteCond %%{HTTP_HOST} ^%(fqdn)s$
    RewriteCond %%{REQUEST_URI} ^/univention/(login|management|self-service|portal|server-overview)/$
    RewriteRule ^/univention/(.*)$ %%{REQUEST_SCHEME}://%(local_fqdn)s/univention/\$1 [L,QSA,R=301,END]
</VirtualHost>
<VirtualHost *:80>
    ServerName %(fqdn)s

    RewriteEngine on
    RewriteCond %%{HTTP_HOST} ^%(fqdn)s$
    RewriteCond %%{REQUEST_URI} ^/univention/(login|management|self-service|portal|server-overview)/$
    RewriteRule ^/univention/(.*)$ %%{REQUEST_SCHEME}://%(local_fqdn)s/univention/\$1 [L,QSA,R=301,END]
</VirtualHost>
</IfModule>
''' % virtconf)


def create_proxy_conf(internal_fqdn, kc_fqdn, path="/"):
    return f'''
    ProxyPreserveHost On
    RequestHeader set X-Forwarded-Proto "https"
    RequestHeader set X-Forwarded-Port "443"
    ProxyPass {path}/ http://127.0.0.1:8180{path}/
    ProxyPassReverse {path}/ http://127.0.0.1:8180{path}/
    '''

sso_fqdn = configRegistry.get('keycloak/server/sso/fqdn', 'ucs-sso-ng.%s' % configRegistry.get('domainname'))
ssofqdn = {'fqdn': sso_fqdn}
import os.path
print("IncludeOptional /var/lib/univention-appcenter/apps/keycloak/data/local-univention-keycloak.conf")
# check if we need to create a keycloak apache config
if configRegistry.is_true('keycloak/apache/config', True):
    domainname = configRegistry.get('domainname')
    local_fqdn = '%s.%s' % (configRegistry.get('hostname'), domainname)
    kc_fqdn = configRegistry.get('keycloak/server/sso/fqdn')
    sso_path = configRegistry.get('keycloak/server/sso/path', '/').rstrip('/')
    proxy_config = create_proxy_conf(local_fqdn, kc_fqdn, sso_path)
    custom_CSP=configRegistry.get('keycloak/csp/frame-ancestors',''),
    ssofqdn.update(dict(
        local_fqdn=local_fqdn,
        ssl_certificate=configRegistry.get('keycloak/apache2/ssl/certificate', '/etc/univention/ssl/%(fqdn)s/cert.pem' % ssofqdn),
        ssl_certificate_key=configRegistry.get('keycloak/apache2/ssl/key', '/etc/univention/ssl/%(fqdn)s/private.key' % ssofqdn),
        ssl_ca_certificate=configRegistry.get('keycloak/apache2/ssl/ca', '/etc/univention/ssl/ucsCA/CAcert.pem'),
        cookies_samesite=configRegistry.get('keycloak/cookies/samesite','None'),
        keycloak_prefix=configRegistry.get('keycloak/url/prefix','keycloak'),
        domain=configRegistry.get('domainname'),
        proxy_config=proxy_config
    ))

    print('''
Header edit Content-Security-Policy " *frame-ancestors [^;]*;" " frame-ancestors \'self\' https://*.%(domain)s {custom_CSP}; "
Header edit Set-Cookie ^(.*)$ \$1;Secure;SameSite=%(cookies_samesite)s
''' % ssofqdn)

    # non-virtual host config
    if not configRegistry.is_true('keycloak/server/sso/virtualhost', True):
        print('''
<IfModule mod_ssl.c>
    %(proxy_config)s
</IfModule>
''' % ssofqdn)
    # virtual host config
    else:
        print_virthost_config(ssofqdn)
    if ssofqdn['fqdn'] != f"ucs-sso-ng.{domainname}":
        admin_fqdn = f"ucs-sso-ng.{domainname}"
        adminfqdn = {'fqdn': admin_fqdn}
        proxy_config = create_proxy_conf(local_fqdn, admin_fqdn)
        adminfqdn.update(dict(
            local_fqdn=local_fqdn,
            ssl_certificate='/etc/univention/ssl/%(fqdn)s/cert.pem' % adminfqdn,
            ssl_certificate_key='/etc/univention/ssl/%(fqdn)s/private.key' % adminfqdn,
            ssl_ca_certificate='/etc/univention/ssl/ucsCA/CAcert.pem',
            cookies_samesite=configRegistry.get('keycloak/cookies/samesite','None'),
            keycloak_prefix=configRegistry.get('keycloak/url/prefix','keycloak'),
            domain=configRegistry.get('domainname'),
            proxy_config=proxy_config
        ))
        print_virthost_config(adminfqdn)
@!@
