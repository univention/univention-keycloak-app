@%@UCRWARNING=# @%@

@!@
import os.path
sso_fqdn = configRegistry.get('keycloak/server/sso/fqdn', 'ucs-sso-ng.%s' % configRegistry.get('domainname'))
config = {'ssofqdn': sso_fqdn}
default_sso_fqdn = 'ucs-sso-ng.%s' % configRegistry.get('domainname')
host_fqdn = '%s.%s' % (configRegistry.get('hostname'), configRegistry.get('domainname'))
default_sso_certificate = "/etc/univention/ssl/%s/cert.pem" % default_sso_fqdn
default_sso_certificate_key = "/etc/univention/ssl/%s/private.key" % default_sso_fqdn
sso_fqdn_certificate = "/etc/univention/ssl/%s/cert.pem" % sso_fqdn
sso_fqdn_certificate_key = "/etc/univention/ssl/%s/private.key" % sso_fqdn

# check if we need to create a keycloak apache config
if configRegistry.is_true('keycloak/apache/config', True):

    fqdn = '%s.%s' % (configRegistry.get('hostname'), configRegistry.get('domainname'))
    kc_fqdn = configRegistry.get('keycloak/server/sso/fqdn')
    sso_path = configRegistry.get('keycloak/server/sso/path', '/').rstrip('/')

    proxy_config = f'''
    ProxyPreserveHost On
    RequestHeader set X-Forwarded-Proto "https"
    RequestHeader set X-Forwarded-Port "443"
    ProxyPass {sso_path}/ http://127.0.0.1:8180{sso_path}/
    ProxyPassReverse {sso_path}/ http://127.0.0.1:8180{sso_path}/
    '''

    # default host certificate
    ssl_certificate = f"/etc/univention/ssl/{host_fqdn}/cert.pem"
    ssl_certificate_key = f"/etc/univention/ssl/{host_fqdn}/private.key"
    ssl_ca_certificate = configRegistry.get("keycloak/apache2/ssl/ca", "/etc/univention/ssl/ucsCA/CAcert.pem")
    # ucs-sso-ng certificate
    if os.path.isfile(default_sso_certificate) and os.path.isfile(default_sso_certificate_key):
        ssl_certificate = default_sso_certificate
        ssl_certificate_key = default_sso_certificate_key
    # non default sso fqdn but in univention/ssl
    if os.path.isfile(sso_fqdn_certificate) and os.path.isfile(sso_fqdn_certificate_key):
        ssl_certificate = sso_fqdn_certificate
        ssl_certificate_key = sso_fqdn_certificate_key
    # keycloak settings
    if configRegistry.get("keycloak/apache2/ssl/certificate") and configRegistry.get("keycloak/apache2/ssl/key"):
        if os.path.isfile(configRegistry['keycloak/apache2/ssl/certificate']) and os.path.isfile(configRegistry['keycloak/apache2/ssl/key']):
            ssl_certificate = configRegistry['keycloak/apache2/ssl/certificate']
            ssl_certificate_key = configRegistry['keycloak/apache2/ssl/key']

    config.update({
        "fqdn": fqdn,
        "kc_fqdn": kc_fqdn,
        "sso_path": sso_path,
        "ssl_certificate": ssl_certificate,
        "ssl_certificate_key": ssl_certificate_key,
        "ssl_ca_certificate": ssl_ca_certificate,
        "custom_CSP": configRegistry.get('keycloak/csp/frame-ancestors', ''),
        "cookies_samesite": configRegistry.get('keycloak/cookies/samesite', 'None'),
        "domain": configRegistry.get('domainname'),
        "proxy_config": proxy_config,
    })

    # header and content policy settings
    print('''
<If "%%{HTTP_HOST} == '%(kc_fqdn)s' &&  %%{REQUEST_URI} =~ m#^%(sso_path)s/.*#  && %%{HTTPS} == \'on\'">
       Header edit Content-Security-Policy " *frame-ancestors [^;]*;" " frame-ancestors \'self\' https://*.%(domain)s https://login.microsoftonline.com %(custom_CSP)s; "
       Header edit Set-Cookie ^(.*)$ \$1;Secure;SameSite=%(cookies_samesite)s
</If>
''' % config)  # noqa: W605

    # non-virtual host config
    if not configRegistry.is_true('keycloak/server/sso/virtualhost', True):
        print('''
RewriteCond %%{HTTPS} off
RewriteRule ^%(sso_path)s/$ https://%%{HTTP_HOST}%%{REQUEST_URI} [L,R=301]

<IfModule mod_ssl.c>
    %(proxy_config)s
</IfModule>
IncludeOptional /var/lib/univention-appcenter/apps/keycloak/data/local-univention-keycloak.conf
''' % config)

    # virtual host config
    else:
        print('''
<IfModule mod_ssl.c>
<VirtualHost *:443>
    ServerName %(ssofqdn)s

    SSLEngine on
    SSLProxyEngine on''' % config)

        # check if cert files exist
        print("    SSLCertificateFile %(ssl_certificate)s" % config)
        print("    SSLCertificateKeyFile %(ssl_certificate_key)s" % config)
        print("    SSLCACertificateFile %(ssl_ca_certificate)s" % config)

        print('''
    Alias "/univention" "/var/www/univention"
    Alias "/favicon.ico" "/var/www/favicon.ico"
    ProxyPass /univention !
    ProxyPass /favicon.ico !
    %(proxy_config)s

    RewriteEngine on
    RewriteCond %%{HTTP_HOST} ^%(ssofqdn)s$
    RewriteCond %%{REQUEST_URI} ^/univention/(login|management|self-service|portal|server-overview)/$
    RewriteRule ^/univention/(.*)$ %%{REQUEST_SCHEME}://%(fqdn)s/univention/\$1 [L,QSA,R=301,END]
    IncludeOptional /var/lib/univention-appcenter/apps/keycloak/data/local-univention-keycloak.conf
</VirtualHost>
<VirtualHost *:80>
   ServerName %(ssofqdn)s
   Redirect permanent / https://%(ssofqdn)s/
</VirtualHost>
</IfModule>
''' % config)  # noqa: W605
@!@
